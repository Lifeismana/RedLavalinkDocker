name: rebuild_red_lavalink

on:
  workflow_dispatch:
    inputs:
      #! this is dumb let's reword that when i feel like it
      version_to_rebuild:
          description: 'Image type: Release or Pre-Release or Both'
          required: true
          default: 'Both'
  schedule:
    - cron: '0 0 * * MON' # every monday at midnight


jobs:
  buildx:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    env:
      TITLE: Red-Lavalink
      GHCR_SLUG: ghcr.io/lifeismana/redlavalinkdocker
    steps:
      - name: Find Jar Tag
        uses: actions/github-script@v4
        with:
          script: |
            const repoinfo = { owner:"Lifeismana", repo:"RedLavalinkDocker",}
            const {data: release} =  await github.repos.listReleases(repoinfo); 
            // if a smaller than b, b will be in front of a, we want higher release first
            const sortedRelease = release.sort((Release_a,Release_b)=>Release_a.tag_name < Release_b.tag_name);
            const sortedPreRelease = sortedRelease.filter((Release)=> Release.prerelease);
            
            const {data: release_data} = (await github.repos.getLatestRelease(repoinfo));
            const release_tag = release_data.tag_name
            const prerelease_tag = sortedPreRelease[0] && sortedPreRelease[0].tag_name > release_tag ? sortedPreRelease[0].tag_name : release_tag;
            
            console.debug(context.payload)

            build_release=true
            build_prerelease=true
            if(context.eventName != 'workflow_dispatch'){
            build_release=context.event.inputs.version_to_rebuild == 'Both' || context.event.inputs.version_to_rebuild == 'Pre-Release'|| context.event.inputs.version_to_rebuild == 'PreRelease'
            build_prerelease=context.event.inputs.version_to_rebuild == 'Both' || context.event.inputs.version_to_rebuild == 'Release'
            
            }


            return {
            release_tag:release_tag,
            prerelease_tag:prerelease_tag,
            build_release:build_release,
            build_prerelease:build_prerelease,
            }
        id: tags

      - 
        name: Checkout
        uses: actions/checkout@v2
        with:
          path: docker-build
      -
        name: Repo metadata
        id: repo
        uses: actions/github-script@v4
        with:
          script: |
            const repo = await github.repos.get(context.repo);
            return repo.data;
      - 
        name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - 
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
      -
        name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - 
        name: Rebuild pre-release
        if: fromJson(steps.tags.outputs.result).prerelease_tag != fromJson(steps.tags.outputs.result).release_tag && fromJson(steps.tags.outputs.result).build_prerelease
        uses: ././docker-build/.github
        with:
          tag: ${{ fromJson(steps.tags.outputs.result).prerelease_tag }}
          prerelease: true
          release: false
          repodata: ${{ steps.repo.outputs.result }}
      - 
        name: Rebuild release 
        if: fromJson(steps.tags.outputs.result).build_release
        uses: ././docker-build/.github
        with:
          tag: ${{ fromJson(steps.tags.outputs.result).release_tag }}
          prerelease: ${{ fromJson(steps.tags.outputs.result).prerelease_tag != fromJson(steps.tags.outputs.result).release_tag }}
          release: true
          repodata: ${{ steps.repo.outputs.result }}
